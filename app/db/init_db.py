import logging
from sqlalchemy import text
from app.models.base import Taikhoan, Nguoidung, Vaitro, ChucnangQuyenVaitro
from app.core.security import get_password_hash
from app.db.base import db_handler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_database() -> None:
    """
    Kh·ªüi t·∫°o database v√† t·∫°o admin user 
    """
    try:
        with db_handler.get_session("mysql") as db:
            # Ki·ªÉm tra admin user ƒë√£ t·ªìn t·∫°i ch∆∞a
            existing_user = db.query(Taikhoan).filter(
                Taikhoan.nguoi_dung_id == "root"
            ).first()
            

            # Ki·ªÉm tra v√† T·∫°o vai tr√≤ m·∫∑c ƒë·ªãnh (admin, sinh vi√™n, gi√°o vi√™n)
            existing_vaitro_admin = db.query(Vaitro).filter(
                Vaitro.ten_vai_tro == "admin"
            ).first()

            existing_vaitro_sinhvien = db.query(Vaitro).filter(
                Vaitro.ten_vai_tro == "sinh vi√™n"
            ).first()

            existing_vaitro_giaovien = db.query(Vaitro).filter(
                Vaitro.ten_vai_tro == "gi√°o vi√™n"
            ).first()
            
            if not existing_vaitro_giaovien:
                logger.info("T·∫°o vai tr√≤ gi√°o vi√™n m·ªõi...")

                try:
                    vaitro_giaovien = Vaitro(
                        id = 3,
                        ten_vai_tro = 'gi√°o vi√™n'
                    )
                    db.add(vaitro_giaovien)
                    
                    # Commit thay v√¨ d√πng context manager
                    db.commit()
                    
                    logger.info("‚úÖ Gi√°o vi√™n role ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                    
                except Exception as e:
                    # Rollback cho c√°c l·ªói kh√°c
                    db.rollback()
                    logger.error(f"‚ùå L·ªói t·∫°o: {e}")
                    raise

            if not existing_vaitro_sinhvien:
                logger.info("T·∫°o vai tr√≤ sinh vi√™n m·ªõi...")

                try:
                    vaitro_sinhvien = Vaitro(
                        id = 2,
                        ten_vai_tro = 'sinh vi√™n'
                    )
                    db.add(vaitro_sinhvien)
                    
                    # Commit thay v√¨ d√πng context manager
                    db.commit()
                    
                    logger.info("‚úÖ Sinh vi√™n role ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                    
                except Exception as e:
                    # Rollback cho c√°c l·ªói kh√°c
                    db.rollback()
                    logger.error(f"‚ùå L·ªói t·∫°o {e}")
                    raise

            if not existing_vaitro_admin:
                logger.info("T·∫°o vai tr√≤ admin m·ªõi...")

                try:
                    vaitro_admin = Vaitro(
                        id = 1,
                        ten_vai_tro = 'admin'
                    )
                    db.add(vaitro_admin)
                    
                    # Commit thay v√¨ d√πng context manager
                    db.commit()
                    
                    logger.info("‚úÖ Admin role ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                except Exception as e:
                    # Rollback cho c√°c l·ªói kh√°c
                    db.rollback()
                    logger.error(f"‚ùå L·ªói t·∫°o {e}")
                    raise

            if not existing_user:
                logger.info("T·∫°o admin user m·ªõi...")
                
                try:
                    # T·∫°o Nguoidung tr∆∞·ªõc
                    admin_per = Nguoidung(
                        ma_so="root",
                        ho_ten="System Administrator"
                    )
                    db.add(admin_per)
                    db.flush()  # L·∫•y ID ngay l·∫≠p t·ª©c
                    
                    logger.info(f"ƒê√£ t·∫°o Nguoidung v·ªõi ma_so: {admin_per.ma_so}")                                   

                    # T·∫°o Taikhoan v·ªõi foreign key
                    admin_user = Taikhoan(
                        nguoi_dung_id=admin_per.ma_so,
                        vai_tro_id= 1,
                        mat_khau=get_password_hash("Admin@123")
                    )
                    db.add(admin_user)
                    
                    # Set Quy·ªÅn Default
                    permission = ChucnangQuyenVaitro(
                        chuc_nang_id="role",
                        bitwise= 15,
                        vai_tro_id= 1 
                    )
                    db.add(permission)
                    
                    # Commit thay v√¨ d√πng context manager
                    db.commit()
                    
                    logger.info("‚úÖ Admin user ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                    logger.info("üë§ Username: root | üîë Password: Admin@123")
                    
                    
       
                except Exception as e:
                    # Rollback cho c√°c l·ªói kh√°c
                    db.rollback()
                    logger.error(f"‚ùå L·ªói t·∫°o admin user: {e}")
                    raise
                    
            else:
                logger.info("‚ÑπÔ∏è  Admin user ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o m·ªõi")
            
            # Test k·∫øt n·ªëi database
            result = db.execute(text("SELECT 1 as test_connection"))
            test_value = result.scalar()
            logger.info(f"‚úÖ Ki·ªÉm tra k·∫øt n·ªëi database: {test_value}")
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o database: {e}")
        logger.error(f"üîç Chi ti·∫øt l·ªói: {type(e).__name__}")
        raise




if __name__ == "__main__":
    create_database()
